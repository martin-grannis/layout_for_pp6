

import 'package:flutter/material.dart';
import 'package:formz/formz.dart';
import 'package:host_repository/src/models/host.dart';
/import 'package:web_socket_demo/widgets/CustomAppBar.dart';
import 'package:host_repository/src/my_secure_storage.dart';

class get_host_connection_password extends StatelessWidget {
  

  get_host_connection_password({
    Key? key,
    required this.this_host,
  }) : super(key: key);

  
  NameInput password = const NameInput.pure();
  final Host this_host;
  final handle_secure_storage hss = handle_secure_storage();

   List<FormzInput> get inputs => [password];

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        AppBar(
          //backgroundColor: FlutterFlowTheme.of(context).secondaryBackground,
          automaticallyImplyLeading: false,
          title: Text("Server password"
              //style: FlutterFlowTheme.of(context).title2,
              ),
          actions: [
            IconButton(
              //borderColor: Colors.transparent,
              //borderRadius: 30,
              //buttonSize: 48,
              icon: Icon(
                Icons.close_rounded,
                //color: FlutterFlowTheme.of(context).secondaryText,
                size: 30,
              ),
              onPressed: () async {
                Navigator.pop(context);
              },
            ),
          ],
          centerTitle: false,
          elevation: 0,
        ),
        Column(mainAxisSize: MainAxisSize.max, children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                "${this_host.name} ip:${this_host.ip_address} ( ${this_host.port}) ${this_host.known ? '*' : ''}",
                textAlign: TextAlign.center,
              ),
            ],
          ),
          Row(
              mainAxisSize: MainAxisSize.max,
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                ElevatedButton(
                  onPressed: () {},
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      SizedBox(width: 200 ),
                    ],
                  ),
                ),
              ]),
          Row(
              mainAxisSize: MainAxisSize.max,
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                ElevatedButton(
                  child: Text("Remember?"),
                  onPressed: () {
                    print('Button pressed ...');

                    hss.setDefaultHost(this_host);
                  },
                ),
              ]),
          Row(
              mainAxisSize: MainAxisSize.max,
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                ElevatedButton(
                  child: Text("Connect"),
                  onPressed: () {
                    print('Button pressed ...');

//                    hss.setDefaultHost(this_host);
                  },
                ),
              ]),
        ])
      ],
    );
  }
}

enum NameInputError { empty }

// Extend FormzInput and provide the input type and error type.
class NameInput extends FormzInput<String, NameInputError> {
  // Call super.pure to represent an unmodified form input.
  const NameInput.pure() : super.pure('');

  // Call super.dirty to represent a modified form input.
  const NameInput.dirty({String value = ''}) : super.dirty(value);

  // Override validator to handle validating a given input value.
  @override
  NameInputError? validator(String value) {
    return value.isEmpty ? NameInputError.empty : null;
  }
}
