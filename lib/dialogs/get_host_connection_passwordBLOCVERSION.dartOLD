import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:formz/formz.dart';
import 'package:host_repository/src/models/host.dart';
//import 'package:web_socket_demo/widgets/CustomAppBar.dart';
import 'package:host_repository/src/my_secure_storage.dart';
import 'package:web_socket_demo/blocs/connection/connection_bloc.dart';

import 'package:web_socket_demo/blocs/passwordForm/password_form_bloc.dart';
import 'package:web_socket_demo/blocs/passwordForm/password_form_bloc.dart'
    as C_Bloc;
// enum NameInputError { empty }

// // Extend FormzInput and provide the input type and error type.
// class NameInput extends FormzInput<String, NameInputError> {
//   // Call super.pure to represent an unmodified form input.
//   const NameInput.pure() : super.pure('');

//   // Call super.dirty to represent a modified form input.
//   const NameInput.dirty({String value = ''}) : super.dirty(value);

//   // Override validator to handle validating a given input value.
//   @override
//   NameInputError? validator(String value) {
//     return value.isEmpty ? NameInputError.empty : null;
//   }
// }

class _PasswordInput extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return BlocBuilder<PasswordFormBloc, C_Bloc.PasswordFormState>(
      buildWhen: (previous, current) => previous.password != current.password,
      builder: (context, state) {
        return TextField(
          key: const Key('loginForm_passwordInput_textField'),
          onChanged: (password) =>
              context.read<PasswordFormBloc>().add(PasswordChanged(password)),
          obscureText: false,
          //obscureText: true,
          decoration: InputDecoration(
            labelText: 'password',
            errorText: state.password.invalid ? state.specificError : null,
          ),
        );
      },
    );
  }
}

class _SubmitButton extends StatelessWidget {
  _SubmitButton(this.this_host);

  final Host this_host;

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<PasswordFormBloc, C_Bloc.PasswordFormState>(
      buildWhen: (previous, current) =>
          previous.formStatus != current.formStatus,
      builder: (context_subForm, state) {
        return state.formStatus.isSubmissionInProgress
            ? const CircularProgressIndicator()
            : ElevatedButton(
                key: const Key('loginForm_continue_raisedButton'),
                // child: Text("Connect ${this.this_host}"),
                child: Text('Connect'),
                onPressed: state.formStatus.isValidated
                    ? () {
                        context.read<PasswordFormBloc>().add(PasswordSubmitted(
                            context, context_subForm, this.this_host, state.password.value));
                      }
                    : null,
              );
      },
    );
  }
}

class get_host_connection_password extends StatelessWidget {
  get_host_connection_password({Key? key, required this.this_host});

  //final NameInput password = NameInput.pure();

  final Host this_host;
  final handle_secure_storage hss = handle_secure_storage();

  //List<FormzInput> get inputs => [password];

  @override
  Widget build(BuildContext context) {
    return BlocListener<PasswordFormBloc, C_Bloc.PasswordFormState>(
      listener: (context, state) {
        if (state.formStatus.isSubmissionFailure) {
          ScaffoldMessenger.of(context)
            ..hideCurrentSnackBar()
            ..showSnackBar(
              //const SnackBar(content: Text('Authentication Failure')),
              SnackBar(content: Text(state.specificError)),
            );
        }
      },
      child: Form(
          child: Column(children: [
        Align(
          alignment: const Alignment(0, -1 / 3),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [Text('Password for host?')],
              ),
              Padding(
                padding: const EdgeInsets.fromLTRB(60, 0, 60, 0),
                child: _PasswordInput(),
              ),
              _SubmitButton(this_host),
            ],
          ),
        ),
      ])),
    );
  }
}
